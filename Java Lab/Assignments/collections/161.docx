//Question1
import java.util.*;
public class ArrayListdemo
{
	public static void main(String args[])
	{
		Scanner obj = new Scanner(System.in);
		ArrayList<String> arr = new ArrayList<String>();
		int choice,index;
		String val;
		String val2;
		while(true)
		{
			System.out.print("\n1.Append at end\n2.Insert at a particular index\n3.Index of element(Search)\n4.Display \n5.Strings starts with the givn letter\n6.strings that has the substring\n7.Sort\n8.Remove\n9.Replace\n10.Remove duplicate\n11.Exit\n\tEnter choice :");
			choice=obj.nextInt();
			if(choice==1)
			{
				System.out.print("Enter the name :");
				val=obj.next();
				arr.add(val);
			}
			else if(choice==2)
			{
				System.out.print("Enter the name :");
				val=obj.next();
				System.out.print("Enter the index :");
				index=obj.nextInt();
				arr.add(index,val);
			}
			else if(choice==3)
			{
				System.out.print("Enter the name :");
				val=obj.next();
				if(arr.indexOf(val)!=-1)
					System.out.println("The element found at the index "+arr.indexOf(val));
				else
					System.out.println("NOT FOUND");
			}
			else if(choice==4)
				System.out.println("ArrayList :"+arr);
			else if(choice==5)
			{
				System.out.print("Enter the starting letter :");
				val=obj.next();
				for(String a : arr)
				{
					if(a.startsWith(val))
					{
						System.out.print(a+"  ");
					}

				}
			}
			else if(choice==6)
			{
				System.out.print("Enter the Substring :");
				val=obj.next();
				for(String a : arr)
				{
					if(a.contains(val))
					{
						System.out.print(a+"  ");
					}

				}
			}
			else if(choice==7)
			{	
				Collections.sort(arr);
				System.out.println("Sorted ArrayList :"+arr);
			}
			else if(choice==8)
			{
				System.out.print("Enter the element :");
				val=obj.next();
				arr.remove(val);
			}	
			else if(choice==9)
			{
				System.out.print("Enter the Index :");
				index=obj.nextInt();
				System.out.print("Enter the replacement String :");
				val2=obj.next();
				arr.set(index,val2);
			}
			else if(choice==10)
			{
				ArrayList<String> arrnew = new ArrayList<String>();
				for(String a : arr)
				{
					if(!arrnew.contains(a))
					{
						arrnew.add(a);
					}
				}
				System.out.println("Formatted List :"+arrnew);
			}
			else if(choice==11)
			{
				break;
			}
		}
	}
}
/*Ouput:
PS F:\Study\SSN\3rd Sem\Java\Assignments\collections> javac ArrayListdemo.java                                                                              PS F:\Study\SSN\3rd Sem\Java\Assignments\collections> java ArrayListdemo      
1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :1
Enter the name :Sree

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :1
Enter the name :Free

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :1
Enter the name :Lree

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :2
Enter the name :Gree
Enter the index :2

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :4
ArrayList :[Sree, Free, Gree, Lree]

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :3
Enter the name :Gree
The element found at the index 2

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :5
Enter the starting letter :G
Gree
1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :1
Enter the name :Sreeisthebest

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :1
Enter the name :Nreeisthebest

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :6
Enter the Substring :best
Sreeisthebest  Nreeisthebest
1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :7
Sorted ArrayList :[Free, Gree, Lree, Nreeisthebest, Sree, Sreeisthebest]

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :8
Enter the element :Lree

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :4
ArrayList :[Free, Gree, Nreeisthebest, Sree, Sreeisthebest]

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :9
1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :

1
Enter the name :Sree

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :1
Enter the name :Sree

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :1
Enter the name :Sree

1.Append at end
2.Insert at a particular index
3.Index of element(Search)
4.Display
5.Strings starts with the givn letter
6.strings that has the substring
7.Sort
8.Remove
9.Replace
10.Remove duplicate
11.Exit
        Enter choice :10
Formatted List :[Sree]*/  

//2.Question............................

import java.util.*;
public class ArrayListdemo2
{
	public static void main(String args[])
	{
		Scanner obj = new Scanner(System.in);
		ArrayList<Integer> arr1 = new ArrayList<Integer>();
		ArrayList<Integer> arr2 = new ArrayList<Integer>();
		ArrayList<Integer> arr3 = new ArrayList<Integer>();
		ArrayList<Integer> arr4 = new ArrayList<Integer>();
		int choice;
		while(true)
		{
		System.out.print("\n1.Create list1\n2.Create list2\n3.Merge two list\n4.Union of two lists\n5.Intersection of two lists\n6.Compare 2 lists\n7.Exit\nEnter choice");
		choice=obj.nextInt();
		if(choice==1)
		{
			for(int i=0;i<5;i++)
			{
				arr1.add(i);
			}
			System.out.println("\nList 1 :"+arr1);
		}
		else if(choice==2)	
		{
			for(int i=0;i<10;i++)
			{
				arr2.add(i);
			}
			System.out.println("\nList 2 :"+arr2);
		}
		else if(choice==3)
		{	
		arr3.addAll(arr1);
		arr3.addAll(arr2);
		System.out.println("\nAfter Combine :"+arr3);
		}
		else if(choice==4)
		{
			System.out.println("\nUnion :");
			for(int i : arr3)
			{
				if(!arr4.contains(i))
				{
					arr4.add(i);
				}
			}	
			
			System.out.print("After Union :"+arr4);
		}
		else if(choice==5)
		{
			System.out.print("[");
			for(int i: arr1)
			{
				if(arr2.contains(i))
					System.out.print(i+"  ");
			}
			System.out.println("]");
		}
		else if(choice==6)
		{
			if(arr1.equals(arr2))
				System.out.println("\nboth list are equal");
			else
				System.out.println("\nBoth list are not equal ");
		}
		else if(choice==7)
		{
			break;
		}
	}	
	}
}
/*Output:
PS F:\Study\SSN\3rd Sem\Java\Assignments\collections> javac ArrayListdemo2.java                                                                             PS F:\Study\SSN\3rd Sem\Java\Assignments\collections> java ArrayListdemo2     
1.Create list1
2.Create list2
3.Merge two list
4.Union of two lists
5.Intersection of two lists
6.Compare 2 lists
7.Exit
Enter choice1

List 1 :[0, 1, 2, 3, 4]

1.Create list1
2.Create list2
3.Merge two list
4.Union of two lists
5.Intersection of two lists
6.Compare 2 lists
7.Exit
Enter choice2

List 2 :[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

1.Create list1
2.Create list2
3.Merge two list
4.Union of two lists
5.Intersection of two lists
6.Compare 2 lists
7.Exit
Enter choice3

After Combine :[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

1.Create list1
2.Create list2
3.Merge two list
4.Union of two lists
5.Intersection of two lists
6.Compare 2 lists
7.Exit
Enter choice4

After Union :[0,1,2,3,4,5,6,7,8,9]

1.Create list1
2.Create list2
3.Merge two list
4.Union of two lists
5.Intersection of two lists
6.Compare 2 lists
7.Exit
Enter choice5
[0  1  2  3  4  ]

1.Create list1
2.Create list2
3.Merge two list
4.Union of two lists
5.Intersection of two lists
6.Compare 2 lists
7.Exit
Enter choice6

Both list are not equal

1.Create list1
2.Create list2
3.Merge two list
4.Union of two lists
5.Intersection of two lists
6.Compare 2 lists
7.Exit
Enter choice */


//3.Question......................
import java.util.*;
public class Doublylinked
{
	public static void main(String args[])
	{
		LinkedList<Integer> list = new LinkedList<Integer>();
		int val,choice,index,val2;
		Scanner obj = new Scanner(System.in);
		while(true)
		{
			System.out.print("\n1.Insert at both end\n2.Delete element on both sides\n3. Insert an element at a particular position\n4.Delete a particular element\n5.Search for a particular element\n6.Display list in forward order and backward order\n7.Sort the elements in LinkedList\n8.Replace one element in the list with another list\n9. Remove duplicate elements\n10.Exit\n\tEnter choice:");
			choice=obj.nextInt();
			if(choice==1)
			{
				System.out.print("Enter the element :");
				val=obj.nextInt();
				list.addFirst(val);
				list.addLast(val);
			}
			else if(choice ==2)
			{
				list.removeFirst();
				list.removeLast();	
			}
			else if(choice==3)
			{
				System.out.print("Enter the element :");
				val=obj.nextInt();
				System.out.print("Enter the index :");
				index=obj.nextInt();
				list.add(index,val);
			}
			else if(choice==4)
			{
				System.out.print("Enter the element :");
				val=obj.nextInt();
				list.remove(val);
			}
			else if(choice==5)
			{
				System.out.print("Enter the element :");
				val=obj.nextInt();
				System.out.println("The element is found in the positon :"+list.indexOf(val));
			}
			else if(choice==6)
			{
				System.out.println("\nThe list printed in the forward direction :");
				ListIterator<Integer> itr = list.listIterator();
				while(itr.hasNext())
				{
					int element = itr.next();
					System.out.print(element +"  ");
				}
				System.out.println("\nThe list printed in the Reverse order");
				ListIterator<Integer> itr1 = list.listIterator();
				while(itr1.hasPrevious())
				{
					int element = itr1.previous();
					System.out.print(element+"  ");
				}
			}
			else if(choice==7)
			{
				Collections.sort(list);
				System.out.println("The Sorted Linked list is :"+list);
			}
			else if(choice==8)
			{
				System.out.print("Enter the Index  :");
				val=obj.nextInt();
				System.out.print("Enter the replacement value :");
				val2=obj.nextInt();
				list.set(val,val2);
			}
			else if(choice ==9)
			{
				LinkedList<Integer> listnew = new LinkedList<Integer>();
				ListIterator<Integer> itr = list.listIterator();
				while(itr.hasNext())
				{
					int element = itr.next();
					if(!listnew.contains(element))
						listnew.add(element);
				}
				System.out.println("\nFormatted List :"+listnew);
			}
			else if(choice==10)
			{
				break;
			}
		}
	}		
}
/*Output:
PS F:\Study\SSN\3rd Sem\Java\Assignments\collections> javac Doublylinked.java PS F:\Study\SSN\3rd Sem\Java\Assignments\collections> java Doublylinked       
1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:1
Enter the element :4

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:1
Enter the element :3

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:2

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:3
Enter the element :5
Enter the index :2

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:4
Enter the element :4
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:1
Enter the element :2

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:6

The list printed in the forward direction :
2  2
The list printed in the Reverse order

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:1
Enter the element :67

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:7
The Sorted Linked list is :[2, 2, 67, 67]

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:8
Enter the Index  :2
Enter the replacement value :67

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:9

Formatted List :[2, 67]

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:6

The list printed in the forward direction :
2  2  67  67
The list printed in the Reverse order

1.Insert at both end
2.Delete element on both sides
3. Insert an element at a particular position
4.Delete a particular element
5.Search for a particular element
6.Display list in forward order and backward order
7.Sort the elements in LinkedList
8.Replace one element in the list with another list
9. Remove duplicate elements
10.Exit
        Enter choice:*/
        


